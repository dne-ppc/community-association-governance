version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: governance-db
    environment:
      POSTGRES_DB: governance_docs
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-governance2025}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
    ports:
      - "5432:5432"
    networks:
      - governance-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: governance-backend
    environment:
      NODE_ENV: production
      PORT: 5000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: governance_docs
      DB_USER: postgres
      DB_PASSWORD: ${DB_PASSWORD:-governance2025}
      JWT_SECRET: ${JWT_SECRET:-your-secret-key-change-in-production}
      SESSION_SECRET: ${SESSION_SECRET:-your-session-secret-change-in-production}
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:3000}
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/logs:/app/logs
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - governance-network
    restart: unless-stopped

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        REACT_APP_API_URL: ${API_URL:-http://localhost:5000}
    container_name: governance-frontend
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - governance-network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: governance-nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/ssl:/etc/nginx/ssl
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - frontend
      - backend
    networks:
      - governance-network
    restart: unless-stopped

  # Redis Cache (Optional)
  redis:
    image: redis:7-alpine
    container_name: governance-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - governance-network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Adminer for Database Management (Development)
  adminer:
    image: adminer
    container_name: governance-adminer
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    networks:
      - governance-network
    profiles:
      - development

networks:
  governance-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data: